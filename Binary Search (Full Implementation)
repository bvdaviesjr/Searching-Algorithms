Binary Search – this is the process of looping through an array or string by finding the start, middle point and end of the content. To build to algorithm, use a while loop that will iterate as long as the start-index is less than or equal to the end-index. Within the loop, make sure to find the midpoint and use the midpoint-value of the content (array or string) to check whether the value you are searching for is greater than middle point or not. Therefore, a new midpoint and midpoint value will be created at every iteration (whether the result you are searching for larger or smaller) of the loop until the result is found. 

Implementation (Pseudo-code)
a.	Create a function with two inputs… - an array, and a value you intend to find in the array
b.	Find the start-index and end-index of the array
c.	Create a while loop that will run as long as the start index is less than the end index of the array
d.	Within the loop, find the midpoint-index of the array (by calculating the start and end indices divided by 2)
e.	Create an if statement that will check if the midpoint-value is less than the value you are searching for. If yes, set the start-index of the new elements to search within the array to the midpoint + 1
f.	Else If the midpoint-value is greater than the value you are searching for, set the end-index of the new elments to search within the array to the midpoint – 1;
g.	Finally, in the else statement, return the midpoint of the array. 

Example (Concrete) –Binary Search
Let us consider an array arr = [10, 20, 30, 40, 50, 60, 70]. Find the location of the item 40 in the array.
Expected Result: 40 is found at the 3 index of the array

// Create a function with 2 parameters
function binarySearch(arr, elem) {

// This is the index at the beginning of the array
	var start = 0;
	// This is the index at the end of the array
	var end = arr.length - 1;
	// This will calculate the middle index in the array
	var middle = Math.floor((start + end) / 2);
	// This loop will run continously as long as the condition is true 
	while(arr[middle] !== elem && start <= end) {
		if(elem < arr[middle]){
			end = middle - 1;
		} else {
			start = middle + 1;
		}
		middle = Math.floor((start + end) / 2);
	}
	// This condition will run when the element is equivalent to the middle element
	if(arr[middle] === elem){
		return middle;
	}
	// Will run when no result is found
	return -1;
}

// This code will execute the function
console.log(binarySearch([10, 20, 30, 40, 50, 60, 70], 40)); 
